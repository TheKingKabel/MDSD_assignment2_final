/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Division;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.Let;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Multiplication;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.Var;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables = new HashMap<String, Integer>();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    MathGenerator.compute(math);
    System.out.println(math);
  }
  
  public static Map<String, Integer> compute(final MathExp math) {
    Expression _exp = math.getExp();
    HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
    final int result = MathGenerator.computeExp(_exp, _hashMap);
    MathGenerator.variables.put(math.getName(), Integer.valueOf(result));
    MathExp _nextExp = math.getNextExp();
    boolean _tripleNotEquals = (_nextExp != null);
    if (_tripleNotEquals) {
      MathGenerator.compute(math.getNextExp());
    }
    return MathGenerator.variables;
  }
  
  public static Map<String, Integer> bind(final Map<String, Integer> env1, final String name, final int value) {
    final HashMap<String, Integer> env2 = new HashMap<String, Integer>(env1);
    env2.put(name, Integer.valueOf(value));
    return env2;
  }
  
  public static int computeExp(final Expression exp, final Map<String, Integer> env) {
    Integer _xifexpression = null;
    if ((exp != null)) {
      Integer _switchResult = null;
      boolean _matched = false;
      if (exp instanceof Plus) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Plus)exp).getLeft(), env);
        int _computeExp_1 = MathGenerator.computeExp(((Plus)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp + _computeExp_1));
      }
      if (!_matched) {
        if (exp instanceof Minus) {
          _matched=true;
          int _computeExp = MathGenerator.computeExp(((Minus)exp).getLeft(), env);
          int _computeExp_1 = MathGenerator.computeExp(((Minus)exp).getRight(), env);
          _switchResult = Integer.valueOf((_computeExp - _computeExp_1));
        }
      }
      if (!_matched) {
        if (exp instanceof Multiplication) {
          _matched=true;
          int _computeExp = MathGenerator.computeExp(((Multiplication)exp).getLeft(), env);
          int _computeExp_1 = MathGenerator.computeExp(((Multiplication)exp).getRight(), env);
          _switchResult = Integer.valueOf((_computeExp * _computeExp_1));
        }
      }
      if (!_matched) {
        if (exp instanceof Division) {
          _matched=true;
          int _computeExp = MathGenerator.computeExp(((Division)exp).getLeft(), env);
          int _computeExp_1 = MathGenerator.computeExp(((Division)exp).getRight(), env);
          _switchResult = Integer.valueOf((_computeExp / _computeExp_1));
        }
      }
      if (!_matched) {
        if (exp instanceof dk.sdu.mmmi.mdsd.math.Number) {
          _matched=true;
          _switchResult = Integer.valueOf(((dk.sdu.mmmi.mdsd.math.Number)exp).getValue());
        }
      }
      if (!_matched) {
        if (exp instanceof Var) {
          _matched=true;
          _switchResult = env.get(((Var)exp).getId());
        }
      }
      if (!_matched) {
        if (exp instanceof Let) {
          _matched=true;
          _switchResult = Integer.valueOf(MathGenerator.computeExp(((Let)exp).getSecond(), MathGenerator.bind(env, ((Let)exp).getName(), MathGenerator.computeExp(((Let)exp).getFirst(), env))));
        }
      }
      if (!_matched) {
        throw new Error("Invalid expression");
      }
      _xifexpression = _switchResult;
    }
    return (_xifexpression).intValue();
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
}
